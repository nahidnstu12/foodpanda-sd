// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  RIDER
  PARTNER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// model User {
//   id                String     @id @default(uuid())
//   name              String     @unique // Required by Better Auth
//   email             String     @unique
//   phone             String?    @unique
//   password          String
//   status            UserStatus @default(INACTIVE)
//   is_email_verified Boolean    @default(false)
//   is_phone_verified Boolean    @default(false)
//   created_at        DateTime   @default(now())
//   updated_at        DateTime   @updatedAt
//   deleted_at        DateTime?

//   customer_profile CustomerProfile?
//   rider_profile    RiderProfile?
//   partner_profile  PartnerProfile?
//   admin_profile    AdminProfile?
//   user_roles       Role[]           @relation("user_role")
//   address          Address[]
//   sessions         Session[]
//   accounts         Account[]

//   @@index([status])
//   @@map("users")
// }
model User {
  id                String     @id @default(cuid()) // Better Auth prefers cuid
  name              String
  email             String     @unique
  phone             String?    @unique
  password          String?    // Make optional for OAuth users
  status            UserStatus @default(INACTIVE)
  emailVerified     Boolean    @default(false) @map("is_email_verified")
  is_phone_verified Boolean    @default(false)
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  deleted_at        DateTime?

  customer_profile CustomerProfile?
  rider_profile    RiderProfile?
  partner_profile  PartnerProfile?
  admin_profile    AdminProfile?
  user_roles       Role[]           @relation("user_role")
  address          Address[]
  sessions         Session[]
  accounts         Account[]

  @@index([status])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                String    @id @default(cuid())
  accountId         String    @map("account_id")
  providerId        String    @map("provider_id")
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?   @map("access_token")
  refreshToken      String?   @map("refresh_token")
  idToken           String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@map("verification")
}

model CustomerProfile {
  id         String   @id @default(uuid())
  user_id    String   @unique
  first_name String
  last_name  String
  dob        DateTime
  gender     String?
  photo_url  String?

  user User @relation(fields: [user_id], references: [id])

  @@map("customer_profiles")
}

model AdminProfile {
  id         String   @id @default(uuid())
  user_id    String   @unique
  first_name String
  last_name  String
  dob        DateTime
  gender     String?
  photo_url  String?

  user User @relation(fields: [user_id], references: [id])

  @@map("admin_profiles")
}

model RiderProfile {
  id                          String   @id @default(uuid())
  user_id                     String   @unique
  first_name                  String
  last_name                   String
  dob                         DateTime
  gender                      String?
  photo_url                   String?
  license_number              String?
  vehicle_registration_number String?
  availabilty_schedule        Json?
  rating                      Float
  attachments                 Json?

  user User @relation(fields: [user_id], references: [id])

  @@index([rating])
  @@map("rider_profiles")
}

model PartnerProfile {
  id                   String  @id @default(uuid())
  owner_user_id        String  @unique
  company_name         String
  operating_hours      Json?
  trade_license        Json?
  tax_id               String?
  bank_account_details Json? // Encrypt this data!
  attachments          Json?
  restaurant_type      String?
  contact_number       String?
  // address

  user    User      @relation(fields: [owner_user_id], references: [id])
  address Address[]

  @@map("partner_profiles")
}

model Permission {
  id          String  @id @default(uuid())
  name        String
  key         String  @unique
  description String?
  group       String?

  role_permissions Role[] @relation("role_permission")

  @@map("permissions")
}

model Role {
  id          String  @id @default(uuid())
  name        String
  key         String  @unique
  description String?

  role_permissions Permission[] @relation("role_permission")
  user_roles       User[]       @relation("user_role")

  @@map("roles")
}

model Address {
  id                 String  @id @default(uuid())
  user_id            String?
  partner_profile_id String?
  address_line_1     String
  address_line_2     String?
  city               String
  state              String
  country            String
  postal_code        String
  latitude           Float
  longitude          Float
  is_primary         Boolean @default(false)

  user            User?           @relation(fields: [user_id], references: [id])
  partner_profile PartnerProfile? @relation(fields: [partner_profile_id], references: [id])

  @@index([city, state])
  @@map("addresses")
}

// model Session {
//   id         String   @id
//   expires_at DateTime
//   token      String
//   created_at DateTime
//   updated_at DateTime
//   ipAddress  String?
//   userAgent  String?
//   userId     String
//   user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   expiresAt DateTime
//   createdAt DateTime
//   updatedAt DateTime

//   @@unique([token])
//   @@map("session")
// }

// model Account {
//   id                     String    @id
//   accountId              String
//   providerId             String
//   userId                 String
//   user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessToken            String?
//   refreshToken           String?
//   idToken                String?
//   accessTokenExpires_at  DateTime?
//   refreshTokenExpires_at DateTime?
//   scope                  String?
//   password               String?
//   created_at             DateTime
//   updated_at             DateTime

//   accessTokenExpiresAt  DateTime?
//   refreshTokenExpiresAt DateTime?
//   createdAt             DateTime
//   updatedAt             DateTime

//   @@map("account")
// }

// model Verification {
//   id         String    @id
//   identifier String
//   value      String
//   expires_at DateTime
//   created_at DateTime?
//   updated_at DateTime?

//   expiresAt DateTime
//   createdAt DateTime?
//   updatedAt DateTime?

//   @@map("verification")
// }
