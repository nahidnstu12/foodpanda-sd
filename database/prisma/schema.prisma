// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  RIDER
  PARTNER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id                String     @id @default(uuid())
  username          String     @unique
  email             String     @unique
  phone             String?    @unique
  password          String
  status            UserStatus @default(INACTIVE)
  // user_type         UserType   @default(CUSTOMER)
  is_email_verified Boolean    @default(false)
  is_phone_verified Boolean    @default(false)
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  deleted_at        DateTime?

  customer_profile CustomerProfile?
  rider_profile    RiderProfile?
  partner_profile  PartnerProfile?
  admin_profile    AdminProfile?
  user_roles       Role[]           @relation("user_role")
  address          Address[]

  @@index([status])
  @@map("users")
}

model CustomerProfile {
  id         String  @id @default(uuid())
  user_id    String  @unique
  first_name String
  last_name  String
  dob        String
  gender     String?
  photo_url  String?

  user User @relation(fields: [user_id], references: [id])

  @@map("customer_profiles")
}
model AdminProfile {
  id         String  @id @default(uuid())
  user_id    String  @unique
  first_name String
  last_name  String
  dob        String
  gender     String?
  photo_url  String?

  user User @relation(fields: [user_id], references: [id])

  @@map("admin_profiles")
}

model RiderProfile {
  id                          String  @id @default(uuid())
  user_id                     String  @unique
  first_name                  String
  last_name                   String
  dob                         String
  gender                      String?
  photo_url                   String?
  license_number              String?
  vehicle_registration_number String?
  availabilty_schedule        Json?
  rating                      Float
  attachments                 Json?

  user User @relation(fields: [user_id], references: [id])

  @@index([rating])
  @@map("rider_profiles")
}

model PartnerProfile {
  id                   String  @id @default(uuid())
  owner_user_id        String  @unique
  company_name         String
  operating_hours      Json?
  trade_license        Json?
  tax_id               String?
  bank_account_details Json? // Encrypt this data!
  attachments          Json?
  restaurant_type      String?
  contact_number       String?
  // address

  user    User      @relation(fields: [owner_user_id], references: [id])
  address Address[]

  @@map("partner_profiles")
}

model Permission {
  id          String  @id @default(uuid())
  name        String
  key         String  @unique
  description String?
  group       String?

  role_permissions Role[] @relation("role_permission")

  @@map("permissions")
}

model Role {
  id          String  @id @default(uuid())
  name        String
  key         String  @unique
  description String?

  role_permissions Permission[] @relation("role_permission")
  user_roles       User[]       @relation("user_role")

  @@map("roles")
}

model Address {
  id                 String  @id @default(uuid())
  user_id            String?
  partner_profile_id String?
  address_line_1     String
  address_line_2     String?
  city               String
  state              String
  country            String
  postal_code        String
  latitude           Float
  longitude          Float
  is_primary         Boolean @default(false)

  user            User?           @relation(fields: [user_id], references: [id])
  partner_profile PartnerProfile? @relation(fields: [partner_profile_id], references: [id])

  @@index([city, state])
  @@map("addresses")
}
